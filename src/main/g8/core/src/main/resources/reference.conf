quadas {
  retry-limit = 3
  cookie-sync {
    kafka {
      topic = ${?KAFKA_TOPIC_DSP_CORE_USER_MAPPING_INDEXER_COOKIE_SYNC}
      partitions = 3

      # Tuning property of scheduled polls.
      poll-interval = 50ms
      
      # Tuning property of the `KafkaConsumer.poll` parameter.
      # Note that non-zero value means that blocking of the thread that
      # is executing the stage will be blocked.
      poll-timeout = 50ms

      # The stage will be await outstanding offset commit requests before
      # shutting down, but if that takes longer than this timeout it will
      # stop forcefully.
      stop-timeout = 30s

      # How long to wait for `KafkaConsumer.close`
      close-timeout = 20s

      # If offset commit requests are not completed within this timeout
      # the returned Future is completed `TimeoutException`.
      commit-timeout = 15s

      # If the KafkaConsumer can't connect to the broker the poll will be
      # aborted after this timeout. The KafkaConsumerActor will throw
      # org.apache.kafka.common.errors.WakeupException which will be ignored
      # until max-wakeups limit gets exceeded.
      wakeup-timeout = 3s

      # After exceeding maxinum wakeups the consumer will stop and the stage will fail.
      max-wakeups = 10

      # Fully qualified config path which holds the dispatcher configuration
      # to be used by the KafkaConsumerActor. Some blocking may occur.
      use-dispatcher = "akka.kafka.default-dispatcher"

      # Properties defined by org.apache.kafka.clients.consumer.ConsumerConfig
      # can be defined in this configuration section.
      kafka-clients {
        group.id = ${?KAFKA_TOPIC_DSP_CORE_USER_MAPPING_INDEXER_COOKIE_SYNC_GID}
        enable.auto.commit = "true"
        auto.commit.interval.ms = "1000"
        session.timeout.ms = "30000"
        key.deserializer = "org.apache.kafka.common.serialization.ByteArrayDeserializer"
        value.deserializer = "org.apache.kafka.common.serialization.ByteArrayDeserializer"
      }
    }
  }
  user-mapping {
    aerospike {
      namespace = ${?AEROSPIKE_DSP_CORE_USER_MAPPING_INDEXER_USER_MAPPING_NAMESPACE}
    }
    
    kafka {
      topic = ${?KAFKA_TOPIC_DSP_CORE_USER_MAPPING_INDEXER_USER_MAPPING}
      parallelism = 100

      # How long to wait for `KafkaProducer.close`
      close-timeout = 60s

      # Fully qualified config path which holds the dispatcher configuration
      # to be used by the producer stages. Some blocking may occur.
      # When this value is empty, the dispatcher configured for the stream
      # will be used.
      use-dispatcher = "akka.kafka.default-dispatcher"

      # Properties defined by org.apache.kafka.clients.producer.ProducerConfig
      # can be defined in this configuration section.
      kafka-clients {
        acks = "all"
        retries = "0"
        batch.size = "0"
        linger.ms = "1"
        buffer.memory = "33554432"
        key.serializer = "org.apache.kafka.common.serialization.ByteArraySerializer"
        value.serializer = "org.apache.kafka.common.serialization.ByteArraySerializer"
      }
    }
  }
}